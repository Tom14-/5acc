#!/bin/bash

set -e

# catch species
while [ "$1" != "" ]; do
  case $1 in
    -s )  shift
        species=$1
        ;;
    * )   echo "Bad input"
        exit 1
  esac
  shift
done


# how many CPUs we got?
if [[ $SLURM_JOB_CPUS_PER_NODE ]]; then
  maxCpus="$SLURM_JOB_CPUS_PER_NODE"
  echo -e "[ "$(date)": Running STAR with "$maxCpus" CPUs ]"
else
  maxCpus=1
fi
let "ram_limit = $maxCpus * 3000000000"
echo -e "[ "$(date)": Allocating $(($ram_limit/1000000000)) GB RAM ]"

# cleanup functions
exit_error() {
  echo -e "[ "$(date)": Script aborted ]"
  exit 1
}

# catch exit codes
trap_exit() {
  exitCode=$?
  if (( "exitCode" == 0 )) ; then
    exit 0
  else
    exit_error
  fi
}

# traps
trap exit_error SIGHUP SIGINT SIGTERM
trap trap_exit EXIT

# handle waiting
FAIL=0
fail_wait() {
for job in $(jobs -p); do
  wait $job || let "FAIL+=1"
done
if [[ ! "$FAIL" == 0 ]]; then
  exit 1
fi
}

set -u

# CODE STARTS HERE -------------------------------------------------------------

cat << _EOF_
[ $(date): Counting reads in shuffled GFF with htseq-count for $species ]
_EOF_

# make output directory
outdir="output/shuffle/htseq/"$species""
if [[ ! -d $outdir ]]; then
  mkdir -p $outdir
fi

# Check for gff
gff="output/shuffle/Osativa_v7.shuffled.gff3"
if [[ ! -e "$gff" ]]; then
  echo -e "[ "$(date)": Can't find shuffled gff3 ]"
  exit 1
fi
cat << _EOF_
[ $(date): Using shuffled gff3 ]
$gff
_EOF_

# stop if there is no STAR index
star_index_dir="output/star-index"
if [[ ! -d "$star_index_dir" ]]; then
  echo -e "[ "$(date)": No STAR index found ]"
  exit 1
fi
echo -e "[ "$(date)": Using STAR index $star_index_dir ]"

# Find bam files
star_dir="output/"$species"/STAR"
shopt -s nullglob
bam_files=("$star_dir"/*.Aligned.out.bam)
shopt -u nullglob

for bam_file in "${bam_files[@]}"; do
  lib_name="$(basename $bam_file .Aligned.out.bam)"
  output=""$outdir"/"$lib_name".htseq-count"
  log=""$outdir"/"$lib_name".htseq-count.err.txt"
  cat << _EOF_
    [ $(date): Submitting htseq-count job ]
    bam_file: $bam_file
    lib_name: $lib_name
      output: $output
         log: $log
_EOF_
  cmd="/usr/local/bin/htseq-count -t CDS -f bam -s reverse -i ID -r name \
    $bam_file $gff"
  srun --ntasks=1 --cpus-per-task=1 --exclusive  --output="$output" \
    --error="$log" "$cmd" &
done

echo -e "[ "$(date)": Waiting for htseq-count jobs to finish ]"
FAIL=0
fail_wait

cat <<- _EOF_ > $outdir/METADATA.csv
  Script,${0}
  branch,$(git rev-parse --abbrev-ref HEAD)
  hash,$(git rev-parse HEAD)
  date,$(date +%F)
  htseq-count version, $(/usr/local/bin/htseq-count --help 2>&1 | tail -n 1)
  gff3,$gff
  output,$outdir
_EOF_

echo -e "[ "$(date)": Jobs finished, exiting ]"
exit 0
